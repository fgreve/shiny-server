bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~Tasa, opacity = 0.7, title = NULL,
position = "bottomright")
})
},
options = list(height = 500)
)
library(shiny)
library(shinyWidgets)
shinyApp(
ui = fluidPage(
titlePanel("Chile: Casos covid19 por comuna"),
helpText("Fernando Greve.",
a(href="http://www.fgreve.com", target="_blank", "www.fgreve.com")),
sidebarLayout(
sidebarPanel(
selectInput("region",
"Region:",
selected = "Metropolitana",
c("All",
unique(as.character(minsal$Region)))),
#selectInput("fecha",
#"Fecha:",
#selected = max(minsal$date),
#c("All",
#unique(as.character(minsal$date)))),
),
mainPanel(output$mymap)
)
),
server = function(input, output) {
data <- minsal
if (input$region != "All") {data <- data[data$Region == input$region,]}
if (input$fecha != "All") {data <- data[data$date == input$fecha,]}
map_reg <- map[map@data$Region==input$region,]
output$mymap <- renderLeaflet({
leaflet(map_reg) %>%
setView(lng = -70.64724, lat = -33.47269, zoom = 11) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = token)) %>%
addPolygons() %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~Tasa, opacity = 0.7, title = NULL,
position = "bottomright")
})
},
options = list(height = 500)
)
leaflet(map_reg) %>%
setView(lng = -70.64724, lat = -33.47269, zoom = 11) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = token)) %>%
addPolygons() %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~Tasa, opacity = 0.7, title = NULL,
position = "bottomright")
m
map_reg <- map[map@data$Region=="Metropolitana",]
leaflet(map_reg) %>%
setView(lng = -70.64724, lat = -33.47269, zoom = 11) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = token)) %>%
addPolygons() %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~Tasa, opacity = 0.7, title = NULL,
position = "bottomright")
m
knitr::opts_chunk$set(echo = TRUE)
m
leaflet(map_reg) %>%
setView(lng = -70.64724, lat = -33.47269, zoom = 11) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = token)) %>%
addPolygons() %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~Tasa, opacity = 0.7, title = NULL,
position = "bottomright")
source('C:/Users/fgreve/Desktop/region/global.R', echo=TRUE)
m <- leaflet(stgo) %>%
setView(lng = -70.64724, lat = -33.47269, zoom = 11) %>%
addProviderTiles("MapBox", options=providerTileOptions(id="mapbox.light", accessToken=token)) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight"="normal", padding="3px 8px"), textsize="15px", direction = "auto")) %>%
addLegend(pal = pal, values = ~Tasa, opacity = 0.7, title = NULL, position = "bottomright")
library(xts)
library(rgdal)
library(dplyr)
library(leaflet)
library(ggplot2)
library(plotly)
library(tidyr)
library(xts)
library(dygraphs)
token = "pk.eyJ1IjoiZmdyZXZlIiwiYSI6ImNrYXpmMmI3dzA4Y3Yyc3AweW95eTR5azkifQ.Bou947cDslixneZpDKrImA"
stgo <- readOGR("https://raw.githubusercontent.com/fgreve/d3-comunas-cl/master/data/comunas.json")
class(stgo)
minsal = read.csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto1/Covid-19.csv",
check.names = FALSE,
encoding="UTF-8") %>%
rename(cod_reg="Codigo region",id="Codigo comuna") %>%
filter(Region == "Metropolitana")
stgo = sp::merge(stgo, minsal, by = "id")
stgo <- stgo[!is.na(stgo@data$Region),]
stgo <- stgo[stgo@data$Region=="Metropolitana",]
no_stgo = c("Tiltil","Lampa","Colina","San Jose de Maipo","Pirque","Paine","Buin","Alhue","Melipilla","San Pedro","Maria Pinto","Curacavi","Penaflor","Calera de Tango","Padre Hurtado","El Monte","Talagante","Isla de Maipo","Lo Barnechea")
stgo = stgo[!(stgo@data$Comuna %in% no_stgo),]
bins <- c(400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, Inf)
pal <- colorBin("YlOrRd", domain = stgo$Tasa, bins = bins)
labels <- sprintf("<strong>%s</strong><br/>%g infected / population", stgo$Comuna, stgo$Tasa) %>% lapply(htmltools::HTML)
m <- leaflet(stgo) %>%
setView(lng = -70.64724, lat = -33.47269, zoom = 11) %>%
addProviderTiles("MapBox", options=providerTileOptions(id="mapbox.light", accessToken=token)) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight"="normal", padding="3px 8px"), textsize="15px", direction = "auto")) %>%
addLegend(pal = pal, values = ~Tasa, opacity = 0.7, title = NULL, position = "bottomright")
source('C:/Users/fgreve/Desktop/covid/global.R', echo=TRUE)
source('C:/Users/fgreve/Desktop/covid/global.R', echo=TRUE)
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
runApp('C:/Users/fgreve/Desktop/covid')
install.packages("pacman")
loadedNamespaces()
pacman::p_unload(pacman::p_loaded(), character.only = TRUE)
loadedNamespaces()
pacman::p_unload(pacman::p_loaded(), character.only = TRUE)
require(nothing, quietly = TRUE)
loadedNamespaces()
library(rgdal)
library(dplyr)
library(leaflet)
library(ggplot2)
library(plotly)
library(tidyr)
library(dygraphs)
library(shiny)
library(shinyWidgets)
library(shinythemes)
library(shinydashboard)
#options(encoding = "UTF-8")
token = "pk.eyJ1IjoiZmdyZXZlIiwiYSI6ImNrYXpmMmI3dzA4Y3Yyc3AweW95eTR5azkifQ.Bou947cDslixneZpDKrImA"
stgo <- readOGR("https://raw.githubusercontent.com/fgreve/d3-comunas-cl/master/data/comunas.json")
class(stgo)
# encoding="UTF-8"
minsal = read.csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto1/Covid-19.csv",
check.names = FALSE, encoding="UTF-8") %>%
rename(cod_reg="Codigo region",id="Codigo comuna") %>%
filter(Region == "Metropolitana")
stgo = sp::merge(stgo, minsal, by = "id")
stgo <- stgo[!is.na(stgo@data$Region),]
stgo <- stgo[stgo@data$Region=="Metropolitana",]
no_stgo = c("Tiltil","Lampa","Colina","San Jose de Maipo","Pirque","Paine","Buin","Alhue","Melipilla","San Pedro","Maria Pinto","Curacavi","Penaflor","Calera de Tango","Padre Hurtado","El Monte","Talagante","Isla de Maipo","Lo Barnechea")
stgo = stgo[!(stgo@data$Comuna %in% no_stgo),]
bins <- c(400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, Inf)
pal <- colorBin("YlOrRd", domain = stgo$Tasa, bins = bins)
labels <- sprintf("<strong>%s</strong><br/>%g infected / population", stgo$Comuna, stgo$Tasa) %>% lapply(htmltools::HTML)
m <- leaflet(stgo) %>%
setView(lng=-70.64724, lat=-33.47269, zoom=11) %>%
addProviderTiles("MapBox", options=providerTileOptions(id="mapbox.light", accessToken=token)) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight"="normal", padding="3px 8px"), textsize="15px", direction = "auto")) %>%
addLegend(pal = pal, values = ~Tasa, opacity = 0.7, title = NULL, position = "bottomright")
# series de tiempo por comuna (Numero de contagios)
library(xts)
time_series = minsal %>%
select(-Region,-cod_reg,-id,-Poblacion,-Tasa) %>%
gather("Fecha","Contagiados",-Comuna) %>%
spread(Comuna,Contagiados)
time_series$Fecha = as.Date(time_series$Fecha)
time_series <- xts(time_series[,-1], order.by=as.Date(time_series[,1], "%Y-%m-%d"))
str(time_series)
time_series = diff(time_series, lag=1)
time_series = last(time_series, 10)
# barra de tasas de contagio por comuna
df = minsal %>% select(Comuna,Tasa)
df$Comuna <- factor(df$Comuna, levels = unique(df$Comuna)[order(df$Tasa, decreasing = FALSE)])
p = df %>% plot_ly(x = ~Comuna, y = ~Tasa, type = "bar", name = 'Contagios')
# TotalesNacionales
producto5 = read.csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto5/TotalesNacionales.csv",
encoding="UTF-8", check.names = FALSE)
TotalesNacionales = producto5 %>% gather("Date","Valor",-Fecha) %>% spread(Fecha,Valor) %>% rename(Fecha = Date)
TotalesNacionales$Fecha = as.Date(TotalesNacionales$Fecha)
TotalesNacionales <- xts(TotalesNacionales[,-1], order.by=as.Date(TotalesNacionales[,1], "%Y-%m-%d"))
str(TotalesNacionales)
names(TotalesNacionales)
View(TotalesNacionales)
"Fallecidos nuevos" = diff(TotalesNacionales$Fallecidos)
View(`Fallecidos nuevos`)
TotalesNacionales$"Fallecidos nuevos" = "Fallecidos nuevos"
library(rgdal)
library(dplyr)
library(leaflet)
library(ggplot2)
library(plotly)
library(tidyr)
library(dygraphs)
library(shiny)
library(shinyWidgets)
library(shinythemes)
library(shinydashboard)
#options(encoding = "UTF-8")
token = "pk.eyJ1IjoiZmdyZXZlIiwiYSI6ImNrYXpmMmI3dzA4Y3Yyc3AweW95eTR5azkifQ.Bou947cDslixneZpDKrImA"
stgo <- readOGR("https://raw.githubusercontent.com/fgreve/d3-comunas-cl/master/data/comunas.json")
class(stgo)
# encoding="UTF-8"
minsal = read.csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto1/Covid-19.csv",
check.names = FALSE, encoding="UTF-8") %>%
rename(cod_reg="Codigo region",id="Codigo comuna") %>%
filter(Region == "Metropolitana")
stgo = sp::merge(stgo, minsal, by = "id")
stgo <- stgo[!is.na(stgo@data$Region),]
stgo <- stgo[stgo@data$Region=="Metropolitana",]
no_stgo = c("Tiltil","Lampa","Colina","San Jose de Maipo","Pirque","Paine","Buin","Alhue","Melipilla","San Pedro","Maria Pinto","Curacavi","Penaflor","Calera de Tango","Padre Hurtado","El Monte","Talagante","Isla de Maipo","Lo Barnechea")
stgo = stgo[!(stgo@data$Comuna %in% no_stgo),]
bins <- c(400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, Inf)
pal <- colorBin("YlOrRd", domain = stgo$Tasa, bins = bins)
labels <- sprintf("<strong>%s</strong><br/>%g infected / population", stgo$Comuna, stgo$Tasa) %>% lapply(htmltools::HTML)
m <- leaflet(stgo) %>%
setView(lng=-70.64724, lat=-33.47269, zoom=11) %>%
addProviderTiles("MapBox", options=providerTileOptions(id="mapbox.light", accessToken=token)) %>%
addPolygons(
fillColor = ~pal(Tasa),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight"="normal", padding="3px 8px"), textsize="15px", direction = "auto")) %>%
addLegend(pal = pal, values = ~Tasa, opacity = 0.7, title = NULL, position = "bottomright")
# series de tiempo por comuna (Numero de contagios)
library(xts)
time_series = minsal %>%
select(-Region,-cod_reg,-id,-Poblacion,-Tasa) %>%
gather("Fecha","Contagiados",-Comuna) %>%
spread(Comuna,Contagiados)
time_series$Fecha = as.Date(time_series$Fecha)
time_series <- xts(time_series[,-1], order.by=as.Date(time_series[,1], "%Y-%m-%d"))
str(time_series)
time_series = diff(time_series, lag=1)
time_series = last(time_series, 10)
# barra de tasas de contagio por comuna
df = minsal %>% select(Comuna,Tasa)
df$Comuna <- factor(df$Comuna, levels = unique(df$Comuna)[order(df$Tasa, decreasing = FALSE)])
p = df %>% plot_ly(x = ~Comuna, y = ~Tasa, type = "bar", name = 'Contagios')
# TotalesNacionales
producto5 = read.csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto5/TotalesNacionales.csv",
encoding="UTF-8", check.names = FALSE)
TotalesNacionales = producto5 %>% gather("Date","Valor",-Fecha) %>% spread(Fecha,Valor) %>% rename(Fecha = Date)
TotalesNacionales$Fecha = as.Date(TotalesNacionales$Fecha)
TotalesNacionales <- xts(TotalesNacionales[,-1], order.by=as.Date(TotalesNacionales[,1], "%Y-%m-%d"))
str(TotalesNacionales)
names(TotalesNacionales)
TotalesNacionales$"Fallecidos nuevos" = diff(TotalesNacionales$Fallecidos)
names(TotalesNacionales) <- c("Casos activos", "Casos activos por FD", "Casos activos por FIS", "Casos nuevos con sintomas", "Casos nuevos sin sintomas", "Casos nuevos totales",
"Casos recuperados", "Casos recuperados por FD", "Casos recuperados por FIS", "Casos totales", "Fallecidos", "Fallecidos nuevos")
TotalesNacionales = last(TotalesNacionales, 30)
View(TotalesNacionales)
versionInfo()
library(readr)
library(tidyverse)
library(plotly)
library(ggthemes)
library(gganimate)
library(geosphere)
library(DT)
library(scales)
library(openair)
library(corrplot)
library(viridisLite)
library(viridis)
library(RColorBrewer)
library(ggdark)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
library(rstudioapi)
getwd()
current_path <- getActiveDocumentContext()$path
getActiveDocumentContext()
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
print(getwd())
library(readr)
library(tidyverse)
library(plotly)
library(ggthemes)
library(gganimate)
library(geosphere)
library(DT)
library(scales)
library(openair)
library(corrplot)
library(viridisLite)
library(viridis)
library(RColorBrewer)
library(ggdark)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
print(getwd())
shiny::runApp()
